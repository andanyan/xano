syntax = "proto3";
package deal;

option go_package = "../deal";

// double float int32 int64 uint32 uint64 sint32 sint64 
// fixed32 fixed64 sfixed64 sfixed32 sfixed64 bool string bytes
// repeated optional required
// protoc 3.19.2
// protoc --proto_path=. --go_out=. *.proto
// protoc-go-inject-tag --input=*.pb.go

// 消息
message Msg {
    // 通信SessionId
    uint64 Sid = 1;
    // 路由 模块_方法
    string Route = 2;
    // 消息id
    uint64 Mid = 3;
    // 消息类型
    uint32 MsgType = 4;
    // data数据协议
    uint32 Deal = 5;
    // 数据
    bytes Data = 6;
    // 版本号
    string Version = 7;
}

// 心跳
message Ping {
    Psutil Psutil = 1;
}
message Pong {
    int64 Pong = 1;
}

// member node
message MemberNode {
    uint64 MchId = 1;
    string Version = 2;
    string Addr = 3;
    int64 LastTime = 4;
    uint64 SessionCount = 5;
    Psutil Psutil = 6;
    string InnerAddr = 7;
}

// server node
message ServerNode {
    string Version = 1;
    string Addr = 2;
    int64 LastTime = 3;
    repeated string Routes = 4;
    Psutil Psutil = 5;
}

// 路由注册
message MemberStartRequest {
    // 版本号
    string Version = 1;
    // 端口
    string Port = 2;
    // inner port
    string InnerPort = 3;
}

message MemberStartResponse {
    repeated ServerNode Node = 1;
}

// 路由关闭
message MemberStopNotice {}

message MemberMchIDPush {
    uint64 MchID = 1;
}

// 服务节点启动
message ServerStartRequest {
    // 版本号
    string Version = 1;
    // 端口
    string Port = 2;
    // 路由
    repeated string Routes = 3;
}

message ServerStartResponse {
    repeated MemberNode node = 1;
}

// 服务节点关闭
message ServerStopNotice {}


// 所有服务节点返回
message ServerNodeRequest {}

message ServerNodeResponse {
    repeated ServerNode node = 1;
}

// 所有服务节点返回
message MemberNodeRequest {}

message MemberNodeResponse {
    repeated MemberNode Node = 1;
}

message MemberNodePush {
    repeated MemberNode Node = 1;
}

message MemberInfoNotice {
    uint64 SessionCount = 1;
}

// 内存数
message Psutil {
    // 内存
    uint64 MemTotal = 1;
    uint64 MemAvailable = 2;
    uint64 MemUsed = 3;
    double MemUsePercent = 4;
    uint64 MemFree = 5;

    // cpu
    int32 CpuCores = 6;
    string CpuModelName = 7;
    double CpuUsePercent = 8;

    // host
    string HostName = 9;
    uint64 HostBoostTime = 10;
    string HostOs = 11;
    string HostPlatform = 12;
}

message SessionInitNotice {
    uint64 Sid = 1;
}
message SessionCloseNotice {
    uint64 Sid = 1;
}
